alloy:
  configMap:
    create: true
    content: |-
      // Discover all pods in the cluster
      discovery.kubernetes "pods" {
        role = "pod"
      }

      // Relabel discovered pods to extract useful metadata
      discovery.relabel "pods" {
        targets = discovery.kubernetes.pods.targets

        // Add namespace label
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
        }

        // Add pod name label
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
        }

        // Add container name label
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label  = "container"
        }

        // Add app label if it exists
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          target_label  = "app"
        }

        // Set the path to the log file
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          separator     = "/"
          target_label  = "__path__"
          replacement   = "/var/log/pods/*$1/*.log"
        }
      }

      // Scrape logs from discovered pods
      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.pods.output
        forward_to = [loki.process.pods.receiver]
      }

      // Process logs (extract JSON if possible, add labels)
      loki.process "pods" {
        stage.docker {}

        // Extract fields from JSON logs
        stage.json {
          expressions = {
            level = "level",
            msg   = "msg",
          }
        }

        // Add extracted level as a label
        stage.labels {
          values = {
            level = "",
          }
        }

        forward_to = [loki.write.loki.receiver]
      }

      // Write logs to Loki
      loki.write "loki" {
        endpoint {
          url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
        }
      }

# Deploy as DaemonSet to run on all nodes
controller:
  type: "daemonset"

# Service account permissions
serviceAccount:
  create: true

# RBAC for Kubernetes API access
rbac:
  create: true

# Mount host paths to access pod logs
alloy-logs:
  enabled: true

# Resource limits
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 512Mi

# Tolerations to run on all nodes including control plane
tolerations:
  - effect: NoSchedule
    operator: Exists

# Mount /var/log/pods for pod logs
extraVolumes:
  - name: varlog
    hostPath:
      path: /var/log/pods
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers

extraVolumeMounts:
  - name: varlog
    mountPath: /var/log/pods
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
